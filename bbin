#!/usr/bin/env bb

; :bbin/start
;
; {:coords {:bbin/url "https://raw.githubusercontent.com/rads/bbin/main/bbin"}}
;
; :bbin/end

(babashka.deps/add-deps
  '{:deps {org.babashka/cli {:mvn/version "0.3.35"},
           babashka/process {:mvn/version "0.1.7"},
           fipp/fipp {:mvn/version "0.6.26"},
           com.taoensso/timbre {:mvn/version "5.2.1"},
           selmer/selmer {:mvn/version "1.12.53"},
           io.github.rads/deps-infer {:git/tag "v0.0.2", :git/sha "267bba1"}}})

(ns rads.bbin.trust
  (:require [clojure.string :as str]
            [babashka.fs :as fs]
            [rads.bbin.util :as util])
  (:import (java.util Date)))

(def base-allow-list
  {'babashka {}
   'rads {}})

(defn user-allow-list [cli-opts]
  (->> (file-seq (util/trust-dir cli-opts))
       (filter #(.isFile %))
       (map (fn [file]
              [(symbol (str/replace (fs/file-name file) #"^github-user-(.+)\.edn$" "$1"))
               {}]))
       (into {})))

(defn combined-allow-list [cli-opts]
  (merge base-allow-list (user-allow-list cli-opts)))

(defn allowed-url? [url cli-opts]
  (some #(or (str/starts-with? url (str "https://github.com/" % "/"))
             (str/starts-with? url (str "https://gist.githubusercontent.com/" % "/")))
        (keys (combined-allow-list cli-opts))))

(defn allowed-lib? [lib cli-opts]
  (or (:git/sha cli-opts)
      (:local/root cli-opts)
      (some #(or (str/starts-with? lib (str "com.github." %))
                 (str/starts-with? lib (str "io.github." %)))
            (keys (combined-allow-list cli-opts)))))

(defn github-trust-file [opts]
  {:path (str (fs/path (util/trust-dir opts) (str "github-user-" (:github/user opts) ".edn")))})

(defn trust-file [opts]
  (cond
    (:github/user opts) (github-trust-file opts)
    :else (throw (ex-info "Invalid CLI opts" {:cli-opts opts}))))

(defn trust [opts]
  (-> (trust-file opts)
      (assoc :contents {:trusted-at (Date.)})))

(defn revoke [opts]
  (trust-file opts))

(ns rads.bbin.scripts
  (:require [babashka.fs :as fs]
            [babashka.deps :as deps]
            [babashka.process :refer [sh]]
            [rads.deps-infer :as deps-infer]
            [clojure.string :as str]
            [clojure.edn :as edn]
            [clojure.pprint :as pprint]
            [selmer.parser :as selmer]
            [selmer.util :as selmer-util]
            [rads.bbin.trust :as trust]
            [rads.bbin.util :as util]))

(defn pprint [x _]
  (pprint/pprint x))

(defn gitlib-path [cli-opts script-deps]
  (let [coords (val (first script-deps))]
    (fs/expand-home (str "~/.gitlibs/libs/" (:script/lib cli-opts) "/" (:git/sha coords)))))

(def git-or-local-template-str
  "#!/usr/bin/env bash
set -e

# :bbin/start
#
{{script/meta}}
#
# :bbin/end

SCRIPT_ROOT='{{script/root}}'
SCRIPT_LIB='{{script/lib}}'
SCRIPT_COORDS='{{script/coords}}'
SCRIPT_MAIN_OPTS_FIRST='{{script/main-opts.0}}'
SCRIPT_MAIN_OPTS_SECOND='{{script/main-opts.1}}'

exec bb \\
  --deps-root \"$SCRIPT_ROOT\" \\
  --config <(echo \"{:deps {$SCRIPT_LIB $SCRIPT_COORDS}}\") \\
  $SCRIPT_MAIN_OPTS_FIRST \"$SCRIPT_MAIN_OPTS_SECOND\" \\
  -- \"$@\"")

(defn- http-url->script-name [http-url]
  (first
    (str/split (last (str/split http-url #"/"))
               #"\.")))

(defn bb-shebang? [s]
  (str/starts-with? s "#!/usr/bin/env bb"))

(defn insert-script-header [script-contents header]
  (let [
        prev-lines (str/split-lines script-contents)
        [prefix [shebang & code]] (split-with #(not (bb-shebang? %)) prev-lines)
        next-lines (concat prefix [shebang]
                           [""
                            "; :bbin/start"
                            ";"]
                           (map #(str "; " %)
                                (str/split-lines
                                  (with-out-str
                                    (pprint/pprint header))))
                           [";"
                            "; :bbin/end"]
                           code)]
    (str/join "\n" next-lines)))

(defn install-http [cli-opts]
  (if-not (trust/allowed-url? (:script/lib cli-opts) cli-opts)
    (throw (ex-info (str "Script URL is not trusted") {:untrusted-url (:script/lib cli-opts)}))
    (let [http-url (:script/lib cli-opts)
          script-deps {:bbin/url http-url}
          header {:coords script-deps}
          _ (pprint header cli-opts)
          script-name (or (:as cli-opts) (http-url->script-name http-url))
          script-contents (-> (slurp (:bbin/url script-deps))
                              (insert-script-header header))
          script-file (fs/canonicalize (fs/file (util/bin-dir cli-opts) script-name)
                                       {:nofollow-links true})]
      (if (:dry-run cli-opts)
        (pprint {:script-file (str script-file)
                 :script-contents script-contents}
                cli-opts)
        (do
          (spit (str script-file) script-contents)
          (sh ["chmod" "+x" (str script-file)] {:err :inherit})
          nil)))))

(defn default-script-config [cli-opts]
  (let [[ns name] (str/split (:script/lib cli-opts) #"/")
        top (last (str/split ns #"\."))]
    {:main-opts ["-m" (str top "." name)]}))

(defn throw-lib-name-not-trusted [cli-opts]
  (let [msg (str "Lib name is not trusted.\nTo install this lib, provide "
                 "a --git/sha option or use `bbin trust` to allow inference "
                 "for this lib name.")]
    (throw (ex-info msg {:untrusted-lib (:script/lib cli-opts)}))))

(defn install-deps-git-or-local [cli-opts]
  (if-not (trust/allowed-lib? (:script/lib cli-opts) cli-opts)
    (throw-lib-name-not-trusted cli-opts)
    (let [script-deps (deps-infer/infer (assoc cli-opts :lib (:script/lib cli-opts)))
          header {:lib (key (first script-deps))
                  :coords (val (first script-deps))}
          _ (pprint header cli-opts)
          _ (deps/add-deps {:deps script-deps})
          script-root (fs/canonicalize (or (:local/root cli-opts) (gitlib-path cli-opts script-deps)) {:nofollow-links true})
          bb-edn (some-> (fs/file script-root "bb.edn") slurp edn/read-string)
          script-name (or (:as cli-opts)
                          (some-> (:bbin/bin bb-edn) first key str)
                          (second (str/split (:script/lib cli-opts) #"/")))
          script-config (or (some-> (:bbin/bin bb-edn) first val)
                            (default-script-config cli-opts))
          script-edn-out (with-out-str
                           (binding [*print-namespace-maps* false]
                             (clojure.pprint/pprint header)))
          main-opts (or (some-> (:main-opts cli-opts) edn/read-string)
                        (:main-opts script-config))
          template-opts {:script/meta (->> script-edn-out
                                           str/split-lines
                                           (map #(str "# " %))
                                           (str/join "\n"))
                         :script/root script-root
                         :script/lib (pr-str (key (first script-deps)))
                         :script/coords (binding [*print-namespace-maps* false] (pr-str (val (first script-deps))))
                         :script/main-opts [(first main-opts)
                                            (if (= "-f" (first main-opts))
                                              (fs/canonicalize (fs/file script-root (second main-opts))
                                                               {:nofollow-links true})
                                              (second main-opts))]}
          template-out (selmer-util/without-escaping
                         (selmer/render git-or-local-template-str template-opts))
          script-file (fs/canonicalize (fs/file (util/bin-dir cli-opts) script-name) {:nofollow-links true})]
      (if (:dry-run cli-opts)
        (pprint {:script-file (str script-file)
                 :template-out template-out}
                cli-opts)
        (do
          (spit (str script-file) template-out)
          (sh ["chmod" "+x" (str script-file)] {:err :inherit})
          nil)))))

(def maven-template-str
  "#!/usr/bin/env bash
set -e

# :bbin/start
#
{{script/meta}}
#
# :bbin/end

SCRIPT_LIB='{{script/lib}}'
SCRIPT_COORDS='{{script/coords}}'
SCRIPT_MAIN_OPTS_FIRST='{{script/main-opts.0}}'
SCRIPT_MAIN_OPTS_SECOND='{{script/main-opts.1}}'

exec bb \\
  --config <(echo \"{:deps {$SCRIPT_LIB $SCRIPT_COORDS}}\") \\
  $SCRIPT_MAIN_OPTS_FIRST \"$SCRIPT_MAIN_OPTS_SECOND\" \\
  -- \"$@\"")

(defn install-deps-maven [cli-opts]
  (let [script-deps {(edn/read-string (:script/lib cli-opts))
                     (select-keys cli-opts [:mvn/version])}
        header {:lib (key (first script-deps))
                :coords (val (first script-deps))}
        _ (pprint header cli-opts)
        _ (deps/add-deps {:deps script-deps})
        script-root (fs/canonicalize (or (:local/root cli-opts) (gitlib-path cli-opts script-deps)) {:nofollow-links true})
        script-name (or (:as cli-opts) (second (str/split (:script/lib cli-opts) #"/")))
        script-config (default-script-config cli-opts)
        script-edn-out (with-out-str
                         (binding [*print-namespace-maps* false]
                           (clojure.pprint/pprint header)))
        main-opts (or (some-> (:main-opts cli-opts) edn/read-string)
                      (:main-opts script-config))
        template-opts {:script/meta (->> script-edn-out
                                         str/split-lines
                                         (map #(str "# " %))
                                         (str/join "\n"))
                       :script/root script-root
                       :script/lib (pr-str (key (first script-deps)))
                       :script/coords (binding [*print-namespace-maps* false] (pr-str (val (first script-deps))))
                       :script/main-opts [(first main-opts)
                                          (if (= "-f" (first main-opts))
                                            (fs/canonicalize (fs/file script-root (second main-opts))
                                                             {:nofollow-links true})
                                            (second main-opts))]}
        template-out (selmer-util/without-escaping
                       (selmer/render maven-template-str template-opts))
        script-file (fs/canonicalize (fs/file (util/bin-dir cli-opts) script-name) {:nofollow-links true})]
    (if (:dry-run cli-opts)
      (pprint {:script-file (str script-file)
               :template-out template-out}
              cli-opts)
      (do
        (spit (str script-file) template-out)
        (sh ["chmod" "+x" (str script-file)] {:err :inherit})
        nil))))

(defn parse-script [s]
  (let [lines (str/split-lines s)
        prefix (if (str/ends-with? (first lines) "bb") ";" "#")]
    (->> lines
         (drop-while #(not (re-seq (re-pattern (str "^" prefix " *:bbin/start")) %)))
         next
         (take-while #(not (re-seq (re-pattern (str "^" prefix " *:bbin/end")) %)))
         (map #(str/replace % (re-pattern (str "^" prefix " *")) ""))
         (str/join "\n")
         edn/read-string)))

(defn load-scripts [cli-opts]
  (->> (file-seq (util/bin-dir cli-opts))
       (filter #(.isFile %))
       (map (fn [x] [(symbol (str (fs/relativize (util/bin-dir cli-opts) x)))
                     (parse-script (slurp x))]))
       (into {})))

(ns rads.bbin
  (:require [babashka.fs :as fs]
            [babashka.cli :as cli]
            [rads.deps-infer :as deps-infer]
            [rads.bbin.scripts :as scripts]
            [rads.bbin.trust :as trust]
            [rads.bbin.util :as util]
            [clojure.string :as str]
            [taoensso.timbre :as log]
            [clojure.pprint :as pprint]))

(defn pprint [x _]
  (pprint/pprint x))

(defn print-help [_]
  (println (str/trim "
Usage: bbin <command>

  bbin install    Install a script
  bbin uninstall  Remove a script
  bbin ls         List installed scripts
  bbin bin        Display bbin bin folder
  bbin trust      Trust an identity
  bbin revoke     Stop trusting an identity")))

(declare print-commands)

(defn run-install [parsed-args]
  (if-not (get-in parsed-args [:opts :script/lib])
    (print-help parsed-args)
    (do
      (util/ensure-bbin-dirs (:opts parsed-args))
      (let [cli-opts (util/canonicalized-cli-opts parsed-args)
            {:keys [procurer]} (deps-infer/summary cli-opts)]
        (case procurer
          :http (scripts/install-http cli-opts)
          :maven (scripts/install-deps-maven cli-opts)
          :git (scripts/install-deps-git-or-local cli-opts)
          :local (scripts/install-deps-git-or-local cli-opts))))))

(defn run-uninstall [parsed-args]
  (if-not (get-in parsed-args [:opts :script/lib])
    (print-help parsed-args)
    (do
      (util/ensure-bbin-dirs (:opts parsed-args))
      (let [cli-opts (:opts parsed-args)
            script-name (:script/lib cli-opts)
            script-file (fs/canonicalize (fs/file (util/bin-dir cli-opts) script-name) {:nofollow-links true})]
        (when (fs/delete-if-exists script-file)
          (println "Removing" (str script-file)))))))

(defn run-ls [{:keys [opts]}]
  (pprint (scripts/load-scripts opts) opts))

(defn run-bin [{:keys [opts]}]
  (println (str (util/bin-dir opts))))

(defn run-trust [{:keys [opts]}]
  (util/ensure-bbin-dirs opts)
  (let [{:keys [path contents] :as plan} (trust/trust opts)]
    (pprint plan opts)
    (spit path (prn-str contents))))

(defn run-revoke [{:keys [opts]}]
  (let [{:keys [path]} (trust/revoke opts)]
    (when (fs/delete-if-exists path)
      (println "Removing" (str path)))))

(def commands
  [{:cmds ["commands"] :fn #(print-commands %)}
   {:cmds ["help"] :fn print-help}
   {:cmds ["install"] :fn run-install :args->opts [:script/lib]}
   {:cmds ["uninstall"] :fn run-uninstall :args->opts [:script/lib]}
   {:cmds ["ls"] :fn run-ls}
   {:cmds ["bin"] :fn run-bin}
   {:cmds ["trust"] :fn run-trust}
   {:cmds ["revoke"] :fn run-revoke}
   {:cmds [] :fn print-help :aliases {:h :help}}])

(defn print-commands [_]
  (println (str/join " " (keep #(first (:cmds %)) commands)))
  nil)

(defn set-logging-config! [{:keys [debug]}]
  (log/merge-config! {:min-level (if debug :debug :warn)}))

(defn -main [& args]
  (set-logging-config! (cli/parse-opts args))
  (cli/dispatch commands args {}))

(when (= *file* (System/getProperty "babashka.file"))
  (apply -main *command-line-args*))

(comment
  (-main "help")
  (-main "install" "https://raw.githubusercontent.com/babashka/babashka/master/examples/portal.clj"))
