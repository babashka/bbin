#!/usr/bin/env bb

; :bbin/start
;
; {:coords {:bbin/url "https://raw.githubusercontent.com/babashka/bbin/v0.1.10/bbin"}}
;
; :bbin/end

(babashka.deps/add-deps
  '{:deps {babashka/process {:mvn/version "0.4.14"},
           com.taoensso/timbre {:mvn/version "5.2.1"},
           expound/expound {:mvn/version "0.9.0"},
           fipp/fipp {:mvn/version "0.6.26"},
           io.github.rads/deps-info {:git/tag "v0.1.1", :git/sha "21975f1"},
           org.babashka/cli {:mvn/version "0.6.43"},
           selmer/selmer {:mvn/version "1.12.55"}}})

(ns babashka.bbin.meta)
(def min-bb-version "This def was generated by the bbin build script." "0.9.162")
(def version "This def was generated by the bbin build script." "0.1.10")
(ns babashka.bbin.specs
  (:require [clojure.spec.alpha :as s]))

(s/def ::ns-default symbol?)
(s/def ::main-opts (s/coll-of string?))
(s/def ::script-config (s/keys :opt-un [::main-opts ::ns-default]))
(s/def :bbin/bin (s/map-of symbol? ::script-config))

(defn valid? [spec form]
  (s/valid? spec form))

(defn explain-str [spec form]
  ((requiring-resolve 'expound.alpha/expound-str) spec form))

(ns babashka.bbin.util
  (:require [babashka.fs :as fs]
            [babashka.process :as p]
            [babashka.bbin.meta :as meta]
            [clojure.pprint :as pprint]
            [clojure.string :as str]
            [taoensso.timbre :as log]
            [clojure.edn :as edn]))

(defn user-home []
  (System/getProperty "user.home"))

(defn sh [cmd & {:as opts}]
  (doto (p/sh cmd (merge {:err :inherit} opts))
    p/check))

(defn set-logging-config! [{:keys [debug]}]
  (log/merge-config! {:min-level (if debug :debug :warn)}))

(defn pprint [x _]
  (pprint/pprint x))

(defn print-help [& _]
  (println (str/trim "
Usage: bbin <command>

  bbin install    Install a script
  bbin uninstall  Remove a script
  bbin ls         List installed scripts
  bbin bin        Display bbin bin folder
  bbin version    Display bbin version
  bbin help       Display bbin help")))

(def ^:dynamic *bin-dir* nil)

(defn print-legacy-path-warning []
  (binding [*out* *err*]
    (println (str/triml "
WARNING: The ~/.babashka/bbin/bin path is deprecated in favor of ~/.local/bin.
WARNING:
WARNING: To remove this message, you can either:
WARNING:
WARNING: Migrate:
WARNING:   - Move files in ~/.babashka/bbin/bin to ~/.local/bin
WARNING:   - Move files in ~/.babashka/bbin/jars to ~/.cache/babashka/bbin/jars (if it exists)
WARNING:
WARNING: OR
WARNING:
WARNING: Override:
WARNING:   - Set the BABASHKA_BBIN_BIN_DIR env variable to \"$HOME/.babashka/bbin\"
"))))

(defn- xdg-flag-enabled? []
  (some-> (System/getenv "BABASHKA_BBIN_FLAG_XDG")
          edn/read-string))

(defn- using-legacy-paths? []
  (and (xdg-flag-enabled?)
       (fs/exists? (fs/file (user-home) ".babashka" "bbin" "bin"))))

(defn check-legacy-paths []
  (when (using-legacy-paths?)
    (print-legacy-path-warning)))

(defn bin-dir-base [_]
  (if (xdg-flag-enabled?)
    (if-let [override (System/getenv "BABASHKA_BBIN_BIN_DIR")]
      (fs/file override)
      (fs/file (user-home) ".local" "bin"))
    (if-let [override (System/getenv "BABASHKA_BBIN_DIR")]
      (fs/file override "bin")
      (fs/file (user-home) ".babashka" "bbin" "bin"))))

(defn bin-dir [opts]
  (or *bin-dir* (bin-dir-base opts)))

(defn- xdg-cache-home []
  (if-let [override (System/getenv "XDG_CACHE_HOME")]
    (fs/file override)
    (fs/file (user-home) ".cache")))

(def ^:dynamic *jars-dir* nil)

(defn jars-dir-base [_]
  (if (xdg-flag-enabled?)
    (if-let [override (System/getenv "BABASHKA_BBIN_JARS_DIR")]
      (fs/file override)
      (fs/file (xdg-cache-home) "babashka" "bbin" "jars"))
    (if-let [override (System/getenv "BABASHKA_BBIN_DIR")]
      (fs/file override "jars")
      (fs/file (user-home) ".babashka" "bbin" "jars"))))

(defn jars-dir [opts]
  (or *jars-dir* (jars-dir-base opts)))

(defn canonicalized-cli-opts [cli-opts]
  (merge cli-opts
         (when-let [v (:local/root cli-opts)]
           {:local/root (str (fs/canonicalize v {:nofollow-links true}))})))

(defn ensure-bbin-dirs [cli-opts]
  (fs/create-dirs (bin-dir cli-opts)))

(def windows?
  (some-> (System/getProperty "os.name")
    (str/lower-case)
    (str/index-of "win")))

(defn print-version [& {:as opts}]
  (if (:help opts)
    (print-help)
    (println "bbin" meta/version)))

(defn- parse-version [version]
  (mapv #(Integer/parseInt %)
        (-> version
            (str/replace "-SNAPSHOT" "")
            (str/split #"\."))))

(defn- satisfies-min-version? [current-version min-version]
  (let [[major-current minor-current patch-current] (parse-version current-version)
        [major-min minor-min patch-min] (parse-version min-version)]
    (or (> major-current major-min)
        (and (= major-current major-min)
             (or (> minor-current minor-min)
                 (and (= minor-current minor-min)
                      (>= patch-current patch-min)))))))

(defn check-min-bb-version []
  (let [current-bb-version (System/getProperty "babashka.version")]
    (when (and meta/min-bb-version (not= meta/min-bb-version :version-not-set))
      (when-not (satisfies-min-version? current-bb-version meta/min-bb-version)
        (binding [*out* *err*]
          (println (str "WARNING: this project requires babashka "
                        meta/min-bb-version " or newer, but you have: "
                        current-bb-version)))))))

(defn snake-case [s]
  (str/replace s "_" "-"))

(defn valid? [spec form]
  ((requiring-resolve 'babashka.bbin.specs/valid?) spec form))

(defn explain-str [spec form]
  ((requiring-resolve 'babashka.bbin.specs/explain-str) spec form))

(ns babashka.bbin.scripts
  (:require [babashka.bbin.util :as util :refer [sh]]
            [babashka.deps :as deps]
            [babashka.fs :as fs]
            [clojure.edn :as edn]
            [clojure.java.io :as io]
            [clojure.main :as main]
            [clojure.pprint :as pprint]
            [clojure.string :as str]
            [rads.deps-info.infer :as deps-info-infer]
            [rads.deps-info.summary :as deps-info-summary]
            [org.httpkit.client :as http]
            [selmer.filters :as filters]
            [selmer.parser :as selmer]
            [selmer.util :as selmer-util])
  (:import (java.util.jar JarFile)))

(defn- pprint [x _]
  (pprint/pprint x))

(defn- local-lib-path [script-deps]
  (let [lib (key (first script-deps))
        coords (val (first script-deps))]
    (if (#{::no-lib} lib)
      (:local/root coords)
      (fs/expand-home (str/join fs/file-separator ["~" ".gitlibs" "libs" (namespace lib) (name lib) (:git/sha coords)])))))

(def ^:private comment-char ";")
(def windows-wrapper-extension ".bat")

;; selmer filter for clojure escaping for e.g. files
(filters/add-filter! :pr-str (comp pr-str str))

(def ^:private local-dir-tool-template-str
  (str/trim "
#!/usr/bin/env bb

; :bbin/start
;
{{script/meta}}
;
; :bbin/end

(require '[babashka.process :as process]
         '[babashka.fs :as fs]
         '[clojure.string :as str])

(def script-root {{script/root|pr-str}})
(def script-ns-default '{{script/ns-default}})
(def script-name (fs/file-name *file*))

(def tmp-edn
  (doto (fs/file (fs/temp-dir) (str (gensym \"bbin\")))
    (spit (str \"{:deps {local/deps {:local/root \" (pr-str script-root) \"}}}\"))
    (fs/delete-on-exit)))

(def base-command
  [\"bb\" \"--deps-root\" script-root \"--config\" (str tmp-edn)])

(defn help-eval-str []
  (str \"(require '\" script-ns-default \")
        (def fns (filter #(fn? (deref (val %))) (ns-publics '\" script-ns-default \")))
        (def max-width (->> (keys fns) (map (comp count str)) (apply max)))
        (defn pad-right [x] (format (str \\\"%-\\\" max-width \\\"s\\\") x))
        (println (str \\\"Usage: \" script-name \" <command>\\\"))
        (newline)
        (doseq [[k v] fns]
          (println
            (str \\\"  \" script-name \" \\\" (pad-right k) \\\"  \\\"
               (when (:doc (meta v))
                 (first (str/split-lines (:doc (meta v))))))))\"))

(def first-arg (first *command-line-args*))
(def rest-args (rest *command-line-args*))

(if first-arg
  (process/exec
    (vec (concat base-command
                 [\"-x\" (str script-ns-default \"/\" first-arg)]
                 rest-args)))
  (process/exec (into base-command [\"-e\" (help-eval-str)])))
"))

(def ^:private deps-tool-template-str
  (str/trim "
#!/usr/bin/env bb

; :bbin/start
;
{{script/meta}}
;
; :bbin/end

(require '[babashka.process :as process]
         '[babashka.fs :as fs]
         '[clojure.string :as str])

(def script-root {{script/root|pr-str}})
(def script-lib '{{script/lib}})
(def script-coords {{script/coords|str}})
(def script-ns-default '{{script/ns-default}})
(def script-name (fs/file-name *file*))

(def tmp-edn
  (doto (fs/file (fs/temp-dir) (str (gensym \"bbin\")))
    (spit (str \"{:deps {\" script-lib script-coords \"}}\"))
    (fs/delete-on-exit)))

(def base-command
  [\"bb\" \"--deps-root\" script-root \"--config\" (str tmp-edn)])

(defn help-eval-str []
  (str \"(require '\" script-ns-default \")
        (def fns (filter #(fn? (deref (val %))) (ns-publics '\" script-ns-default \")))
        (def max-width (->> (keys fns) (map (comp count str)) (apply max)))
        (defn pad-right [x] (format (str \\\"%-\\\" max-width \\\"s\\\") x))
        (println (str \\\"Usage: \" script-name \" <command>\\\"))
        (newline)
        (doseq [[k v] fns]
          (println
            (str \\\"  \" script-name \" \\\" (pad-right k) \\\"  \\\"
               (when (:doc (meta v))
                 (first (str/split-lines (:doc (meta v))))))))\"))

(def first-arg (first *command-line-args*))
(def rest-args (rest *command-line-args*))

(if first-arg
  (process/exec
    (vec (concat base-command
                 [\"-x\" (str script-ns-default \"/\" first-arg)]
                 rest-args)))
  (process/exec (into base-command [\"-e\" (help-eval-str)])))
"))

(def ^:private local-jar-template-str
  (str/trim "
#!/usr/bin/env bb

; :bbin/start
;
{{script/meta}}
;
; :bbin/end

(require '[babashka.classpath :refer [add-classpath]])

(def script-jar {{script/jar|pr-str}})

(add-classpath script-jar)

(require '[{{script/main-ns}}])
(apply {{script/main-ns}}/-main *command-line-args*)
"))

(def ^:private local-dir-template-str
  (str/trim "
#!/usr/bin/env bb

; :bbin/start
;
{{script/meta}}
;
; :bbin/end

(require '[babashka.process :as process]
         '[babashka.fs :as fs]
         '[clojure.string :as str])

(def script-root {{script/root|pr-str}})
(def script-main-opts-first {{script/main-opts.0|pr-str}})
(def script-main-opts-second {{script/main-opts.1|pr-str}})

(def tmp-edn
  (doto (fs/file (fs/temp-dir) (str (gensym \"bbin\")))
    (spit (str \"{:deps {local/deps {:local/root \" (pr-str script-root) \"}}}\"))
    (fs/delete-on-exit)))

(def base-command
  [\"bb\" \"--deps-root\" script-root \"--config\" (str tmp-edn)
        script-main-opts-first script-main-opts-second
        \"--\"])

(process/exec (into base-command *command-line-args*))
"))

(def ^:private git-or-local-template-str
  (str/trim "
#!/usr/bin/env bb

; :bbin/start
;
{{script/meta}}
;
; :bbin/end

(require '[babashka.process :as process]
         '[babashka.fs :as fs]
         '[clojure.string :as str])

(def script-root {{script/root|pr-str}})
(def script-lib '{{script/lib}})
(def script-coords {{script/coords|str}})
(def script-main-opts-first {{script/main-opts.0|pr-str}})
(def script-main-opts-second {{script/main-opts.1|pr-str}})

(def tmp-edn
  (doto (fs/file (fs/temp-dir) (str (gensym \"bbin\")))
    (spit (str \"{:deps {\" script-lib script-coords \"}}\"))
    (fs/delete-on-exit)))

(def base-command
  [\"bb\" \"--deps-root\" script-root \"--config\" (str tmp-edn)
        script-main-opts-first script-main-opts-second
        \"--\"])

(process/exec (into base-command *command-line-args*))
"))

(defn- http-url->script-name [http-url]
  (util/snake-case
    (first
     (str/split (last (str/split http-url #"/"))
                #"\."))))

(defn- file-path->script-name [file-path]
  (-> file-path
    fs/file-name
    fs/strip-ext
    util/snake-case))

(def bb-shebang-str "#!/usr/bin/env bb")

(defn- bb-shebang? [s]
  (str/starts-with? s bb-shebang-str))

(defn insert-script-header [script-contents header]
  (let [prev-lines (str/split-lines script-contents)
        [prefix [shebang & code]] (split-with #(not (bb-shebang? %)) prev-lines)
        header (concat [""
                        "; :bbin/start"
                        ";"]
                       (map #(str "; " %)
                            (str/split-lines
                              (with-out-str
                                (pprint/pprint header))))
                       [";"
                        "; :bbin/end"
                        ""])
        next-lines (if shebang
                     (concat prefix [shebang] header code)
                     (concat [bb-shebang-str] header prefix))]
    (str/join "\n" next-lines)))

(defn- install-script
  "Spits `contents` to `path` (adding an extension on Windows), or
  pprints them if `dry-run?` is truthy.
  Side-effecting."
  [path contents dry-run?]
  (let [path-str (str path)]
    (if dry-run?
      (pprint {:script-file     path-str
               :script-contents contents}
              dry-run?)
      (do
        (spit path-str contents)
        (when-not util/windows? (sh ["chmod" "+x" path-str]))
        (when util/windows?
          (spit (str path-str windows-wrapper-extension) (str "@bb -f %~dp0" (fs/file-name path-str) " -- %*")))
        nil))))

(defn- install-http-file [cli-opts]
  (let [http-url (:script/lib cli-opts)
        script-deps {:bbin/url http-url}
        header {:coords script-deps}
        _ (pprint header cli-opts)
        script-name (or (:as cli-opts) (http-url->script-name http-url))
        script-contents (-> (slurp (:bbin/url script-deps))
                            (insert-script-header header))
        script-file (fs/canonicalize (fs/file (util/bin-dir cli-opts) script-name)
                                     {:nofollow-links true})]
    (install-script script-file script-contents (:dry-run cli-opts))))

(defn- install-local-script [cli-opts]
  (let [file-path (str (fs/canonicalize (:script/lib cli-opts) {:nofollow-links true}))
        script-deps {:bbin/url (str "file://" file-path)}
        header {:coords script-deps}
        _ (pprint header cli-opts)
        script-name (or (:as cli-opts) (file-path->script-name file-path))
        script-contents (-> (slurp file-path)
                            (insert-script-header header))
        script-file (fs/canonicalize (fs/file (util/bin-dir cli-opts) script-name)
                                     {:nofollow-links true})]
    (install-script script-file script-contents (:dry-run cli-opts))))

(defn jar->main-ns [jar-path]
  (with-open [jar-file (JarFile. (fs/file jar-path))]
    (let [main-attributes (some-> jar-file .getManifest .getMainAttributes)
          ;; TODO After July 17th 2023: Remove workaround below and start using (.getValue "Main-Class") instead
          ;;      (see https://github.com/babashka/bbin/pull/47#discussion_r1071348344)
          main-class (some (fn [[k v]] (when (str/includes? k "Main-Class") v))
                           main-attributes)]
      (if main-class
        (main/demunge main-class)
        (throw (ex-info "jar has no Main-Class" {:jar-path jar-path}))))))

(defn- install-http-jar [cli-opts]
  (fs/create-dirs (util/jars-dir cli-opts))
  (let [http-url (:script/lib cli-opts)
        script-deps {:bbin/url http-url}
        header {:coords script-deps}
        script-name (or (:as cli-opts) (http-url->script-name http-url))
        tmp-jar-path (doto (fs/file (fs/temp-dir) (str script-name ".jar"))
                       (fs/delete-on-exit))
        _ (io/copy (:body @(http/get http-url {:as :byte-array})) tmp-jar-path)
        main-ns (jar->main-ns tmp-jar-path)
        cached-jar-path (fs/file (util/jars-dir cli-opts) (str script-name ".jar"))
        _ (fs/move tmp-jar-path cached-jar-path {:replace-existing true})
        _ (pprint header cli-opts)
        script-edn-out (with-out-str
                         (binding [*print-namespace-maps* false]
                           (clojure.pprint/pprint header)))
        template-opts {:script/meta (->> script-edn-out
                                         str/split-lines
                                         (map #(str comment-char " " %))
                                         (str/join "\n"))
                       :script/main-ns main-ns
                       :script/jar cached-jar-path}
        script-contents (selmer-util/without-escaping
                          (selmer/render local-jar-template-str template-opts))
        script-file (fs/canonicalize (fs/file (util/bin-dir cli-opts) script-name)
                                     {:nofollow-links true})]
    (install-script script-file script-contents (:dry-run cli-opts))))

(defn- install-local-jar [cli-opts]
  (fs/create-dirs (util/jars-dir cli-opts))
  (let [file-path (str (fs/canonicalize (:script/lib cli-opts) {:nofollow-links true}))
        main-ns (jar->main-ns file-path)
        script-deps {:bbin/url (str "file://" file-path)}
        header {:coords script-deps}
        _ (pprint header cli-opts)
        script-name (or (:as cli-opts) (file-path->script-name file-path))
        cached-jar-path (fs/file (util/jars-dir cli-opts) (str script-name ".jar"))
        script-edn-out (with-out-str
                         (binding [*print-namespace-maps* false]
                           (clojure.pprint/pprint header)))
        template-opts {:script/meta (->> script-edn-out
                                         str/split-lines
                                         (map #(str comment-char " " %))
                                         (str/join "\n"))
                       :script/main-ns main-ns
                       :script/jar cached-jar-path}
        script-contents (selmer-util/without-escaping
                          (selmer/render local-jar-template-str template-opts))
        script-file (fs/canonicalize (fs/file (util/bin-dir cli-opts) script-name)
                                     {:nofollow-links true})]
    (fs/copy file-path cached-jar-path {:replace-existing true})
    (install-script script-file script-contents (:dry-run cli-opts))))

(defn- default-script-config [cli-opts]
  (let [[ns name] (str/split (:script/lib cli-opts) #"/")
        top (last (str/split ns #"\."))]
    {:main-opts ["-m" (str top "." name)]
     :ns-default (str top "." name)}))

(defn- generate-deps-lib-name [git-url]
  (let [s (str "script-"
               (.hashCode git-url)
               "-"
               (-> git-url
                   (str/replace #"[^a-zA-Z0-9-]" "-")
                   (str/replace #"--+" "-")))]
    (symbol "org.babashka.bbin" s)))

(defn- load-bin-config [script-root]
  (require 'babashka.bbin.specs)
  (let [bb-file (fs/file script-root "bb.edn")
        bb-edn (when (fs/exists? bb-file)
                 (some-> bb-file slurp edn/read-string))
        bin-config (:bbin/bin bb-edn)]
    (when bin-config
      (if (util/valid? :bbin/bin bin-config)
        bin-config
        (throw (ex-info (util/explain-str :bbin/bin bin-config)
                        {:bbin/bin bin-config}))))))

(defn- install-deps-git-or-local [cli-opts {:keys [procurer] :as _summary}]
  (let [script-deps (cond
                      (and (#{:local} procurer) (not (:local/root cli-opts)))
                      {::no-lib {:local/root (str (fs/canonicalize (:script/lib cli-opts) {:nofollow-links true}))}}

                      (deps-info-summary/git-repo-url? (:script/lib cli-opts))
                      (deps-info-infer/infer
                        (cond-> (assoc cli-opts :lib (str (generate-deps-lib-name (:script/lib cli-opts)))
                                                :git/url (:script/lib cli-opts))
                                (not (some cli-opts [:latest-tag :latest-sha :git/sha :git/tag]))
                                (assoc :latest-sha true)))

                      :else
                      (deps-info-infer/infer (assoc cli-opts :lib (:script/lib cli-opts))))
        lib (key (first script-deps))
        coords (val (first script-deps))
        header (merge {:coords coords} (when-not (#{::no-lib} lib) {:lib lib}))
        header' (if (#{::no-lib} lib)
                  {:coords {:bbin/url (str "file://" (get-in header [:coords :local/root]))}}
                  header)
        _ (pprint header' cli-opts)
        _ (when-not (#{::no-lib} lib)
            (deps/add-deps {:deps script-deps}))
        script-root (fs/canonicalize (or (get-in header [:coords :local/root])
                                         (local-lib-path script-deps))
                                     {:nofollow-links true})
        bin-config (load-bin-config script-root)
        script-name (or (:as cli-opts)
                        (some-> bin-config first key str)
                        (and (not (#{::no-lib} lib))
                             (second (str/split (:script/lib cli-opts) #"/"))))
        _ (when (str/blank? script-name)
            (throw (ex-info "Script name not found. Use --as or :bbin/bin to provide a script name."
                            header)))
        script-config (merge (when-not (#{::no-lib} lib)
                               (default-script-config cli-opts))
                             (some-> bin-config first val)
                             (when (:ns-default cli-opts)
                               {:ns-default (edn/read-string (:ns-default cli-opts))}))
        script-edn-out (with-out-str
                         (binding [*print-namespace-maps* false]
                           (clojure.pprint/pprint header')))
        tool-mode (or (:tool cli-opts)
                      (and (some-> bin-config first val :ns-default)
                           (not (some-> bin-config first val :main-opts))))
        main-opts (or (some-> (:main-opts cli-opts) edn/read-string)
                      (:main-opts script-config))
        _ (when (and (not tool-mode) (not (seq main-opts)))
            (throw (ex-info "Main opts not found. Use --main-opts or :bbin/bin to provide main opts."
                            {})))
        template-opts {:script/meta (->> script-edn-out
                                         str/split-lines
                                         (map #(str comment-char " " %))
                                         (str/join "\n"))
                       :script/root script-root
                       :script/lib (pr-str (key (first script-deps)))
                       :script/coords (binding [*print-namespace-maps* false] (pr-str (val (first script-deps))))}
        template-opts' (if tool-mode
                         (assoc template-opts :script/ns-default (:ns-default script-config))
                         (assoc template-opts :script/main-opts
                                              [(first main-opts)
                                               (if (= "-f" (first main-opts))
                                                 (fs/canonicalize (fs/file script-root (second main-opts))
                                                                  {:nofollow-links true})
                                                 (second main-opts))]))
        template-str (if tool-mode
                       (if (#{::no-lib} lib)
                         local-dir-tool-template-str
                         deps-tool-template-str)
                       (if (#{::no-lib} lib)
                         local-dir-template-str
                         git-or-local-template-str))
        template-out (selmer-util/without-escaping
                      (selmer/render template-str template-opts'))
        script-file (fs/canonicalize (fs/file (util/bin-dir cli-opts) script-name) {:nofollow-links true})]
    (install-script script-file template-out (:dry-run cli-opts))))

(def ^:private maven-template-str
  (str/trim "
#!/usr/bin/env bb

; :bbin/start
;
{{script/meta}}
;
; :bbin/end

(require '[babashka.process :as process]
         '[babashka.fs :as fs]
         '[clojure.string :as str])

(def script-lib '{{script/lib}})
(def script-coords {{script/coords|str}})
(def script-main-opts-first {{script/main-opts.0|pr-str}})
(def script-main-opts-second {{script/main-opts.1|pr-str}})

(def tmp-edn
  (doto (fs/file (fs/temp-dir) (str (gensym \"bbin\")))
    (spit (str \"{:deps {\" script-lib script-coords \"}}\"))
    (fs/delete-on-exit)))

(def base-command
  [\"bb\" \"--config\" (str tmp-edn)
        script-main-opts-first script-main-opts-second
        \"--\"])

(process/exec (into base-command *command-line-args*))
"))

(defn- install-deps-maven [cli-opts]
  (let [script-deps {(edn/read-string (:script/lib cli-opts))
                     (select-keys cli-opts [:mvn/version])}
        header {:lib (key (first script-deps))
                :coords (val (first script-deps))}
        _ (pprint header cli-opts)
        _ (deps/add-deps {:deps script-deps})
        script-root (fs/canonicalize (or (:local/root cli-opts) (local-lib-path script-deps)) {:nofollow-links true})
        script-name (or (:as cli-opts) (second (str/split (:script/lib cli-opts) #"/")))
        script-config (default-script-config cli-opts)
        script-edn-out (with-out-str
                         (binding [*print-namespace-maps* false]
                           (clojure.pprint/pprint header)))
        main-opts (or (some-> (:main-opts cli-opts) edn/read-string)
                      (:main-opts script-config))
        template-opts {:script/meta (->> script-edn-out
                                         str/split-lines
                                         (map #(str comment-char " " %))
                                         (str/join "\n"))
                       :script/root script-root
                       :script/lib (pr-str (key (first script-deps)))
                       :script/coords (binding [*print-namespace-maps* false] (pr-str (val (first script-deps))))
                       :script/main-opts [(first main-opts)
                                          (if (= "-f" (first main-opts))
                                            (fs/canonicalize (fs/file script-root (second main-opts))
                                                             {:nofollow-links true})
                                            (second main-opts))]}
        template-out (selmer-util/without-escaping
                      (selmer/render maven-template-str template-opts))
        script-file (fs/canonicalize (fs/file (util/bin-dir cli-opts) script-name) {:nofollow-links true})]
    (install-script script-file template-out (:dry-run cli-opts))))

(defn- parse-script [s]
  (let [lines (str/split-lines s)
        prefix (if (str/ends-with? (first lines) "bb") ";" "#")]
    (->> lines
         (drop-while #(not (re-seq (re-pattern (str "^" prefix " *:bbin/start")) %)))
         next
         (take-while #(not (re-seq (re-pattern (str "^" prefix " *:bbin/end")) %)))
         (map #(str/replace % (re-pattern (str "^" prefix " *")) ""))
         (str/join "\n")
         edn/read-string)))

(defn load-scripts [cli-opts]
  (->> (file-seq (util/bin-dir cli-opts))
       (filter #(.isFile %))
       (map (fn [x] [(symbol (str (fs/relativize (util/bin-dir cli-opts) x)))
                     (parse-script (slurp x))]))
       (filter second)
       (into {})))

(defn ls [cli-opts]
  (-> (load-scripts cli-opts)
      (util/pprint cli-opts)))

(defn bin [cli-opts]
  (println (str (util/bin-dir cli-opts))))

(defn install [cli-opts]
  (if-not (:script/lib cli-opts)
    (util/print-help)
    (do
      (util/ensure-bbin-dirs cli-opts)
      (let [cli-opts' (util/canonicalized-cli-opts cli-opts)
            summary (deps-info-summary/summary cli-opts')
            {:keys [procurer artifact]} summary]
        (case [procurer artifact]
          [:git :dir] (install-deps-git-or-local cli-opts' summary)
          [:http :file] (install-http-file cli-opts')
          [:http :jar] (install-http-jar cli-opts')
          [:local :dir] (install-deps-git-or-local cli-opts' summary)
          [:local :file] (install-local-script cli-opts')
          [:local :jar] (install-local-jar cli-opts')
          [:maven :jar] (install-deps-maven cli-opts')
          (throw (ex-info "Invalid script coordinates.\nIf you're trying to install from the filesystem, make sure the path actually exists."
                          {:script/lib (:script/lib cli-opts')
                           :procurer procurer
                           :artifact artifact})))))))

(defn uninstall [cli-opts]
  (if-not (:script/lib cli-opts)
    (util/print-help)
    (do
      (util/ensure-bbin-dirs cli-opts)
      (let [script-name (:script/lib cli-opts)
            script-file (fs/canonicalize (fs/file (util/bin-dir cli-opts) script-name) {:nofollow-links true})]
        (when (fs/delete-if-exists script-file)
          (when util/windows? (fs/delete-if-exists (fs/file (str script-file windows-wrapper-extension))))
          (fs/delete-if-exists (fs/file (util/jars-dir cli-opts) (str script-name ".jar")))
          (println "Removing" (str script-file)))))))

(ns babashka.bbin.cli
  (:require [babashka.cli :as cli]
            [babashka.bbin.scripts :as scripts]
            [babashka.bbin.util :as util]
            [clojure.string :as str]))

(declare print-commands)

(defn- run [command-fn {:keys [opts]}]
  (util/check-legacy-paths)
  (if (and (:version opts) (not (:help opts)))
    (util/print-version)
    (command-fn opts)))

(defn- add-global-aliases [commands]
  (map #(assoc-in % [:aliases :h] :help) commands))

(defn- base-commands
  [& {:keys [install-fn uninstall-fn ls-fn bin-fn]}]
  [{:cmds ["commands"]
    :fn #(run print-commands %)}

   {:cmds ["help"]
    :fn #(run util/print-help %)}

   {:cmds ["install"]
    :fn #(run install-fn %)
    :args->opts [:script/lib]
    :aliases {:T :tool}}

   {:cmds ["uninstall"]
    :fn #(run uninstall-fn %)
    :args->opts [:script/lib]}

   {:cmds ["ls"]
    :fn #(run ls-fn %)}

   {:cmds ["bin"]
    :fn #(run bin-fn %)}

   {:cmds ["version"]
    :fn #(run util/print-version %)}

   {:cmds []
    :fn #(run util/print-help %)}])

(defn- full-commands [& {:as run-opts}]
  (add-global-aliases (base-commands run-opts)))

(defn- print-commands [_]
  (println (str/join " " (keep #(first (:cmds %)) (full-commands)))))

(def default-run-opts
  {:install-fn scripts/install
   :uninstall-fn scripts/uninstall
   :ls-fn scripts/ls
   :bin-fn scripts/bin})

(defn bbin [main-args & {:as run-opts}]
  (let [run-opts' (merge default-run-opts run-opts)]
    (util/set-logging-config! (cli/parse-opts main-args))
    (cli/dispatch (full-commands run-opts') main-args {})))

(defn -main [& args]
  (bbin args))

(when (= *file* (System/getProperty "babashka.file"))
  (util/check-min-bb-version)
  (apply -main *command-line-args*))
