(ns babashka.bbin.gen-script
  (:require [babashka.fs :as fs]
            [clojure.edn :as edn]
            [clojure.string :as str]
            [clojure.tools.namespace.dependency :as ns-dep]
            [clojure.tools.namespace.file :as ns-file]
            [clojure.tools.namespace.track :as ns-track]
            [fipp.edn :as fipp]))

(def bbin-deps (some-> (slurp "deps.edn") edn/read-string :deps))

(def version
  (-> (slurp "deps.edn") edn/read-string
      :aliases :neil :project :version))

(def prelude-template
  (str/triml "
#!/usr/bin/env bb

; :bbin/start
;
; {:coords {:bbin/url \"https://raw.githubusercontent.com/babashka/bbin/%s/bbin\"}}
;
; :bbin/end

(babashka.deps/add-deps
  '{:deps %s})
"))

(def min-bb-version
  (some-> (slurp "bb.edn") edn/read-string :min-bb-version))

(def meta-template
  `[(~'ns ~'babashka.bbin.meta)
    (~'def ~'min-bb-version
           "This def was generated by the bbin build script."
           ~min-bb-version)
    (~'def ~'version
           "This def was generated by the bbin build script."
           ~version)])

(def meta-str
  (str/join "\n" (map pr-str meta-template)))

(def prelude-str
  (let [lines (-> (with-out-str (fipp/pprint bbin-deps {:width 80})) str/split-lines)]
    (format prelude-template
            (if (str/ends-with? version "-SNAPSHOT") "main" (str "v" version))
            (str/join "\n" (cons (first lines) (map #(str "          " %) (rest lines)))))))

(defn sorted-namespaces [path]
  (->> (file-seq (fs/file path))
       (filter ns-file/clojure-file?)
       (ns-file/add-files {})
       ::ns-track/deps
       ns-dep/topo-sort))

(defn ns-sym->path [ns-sym]
  (let [parts (str/split (str/replace ns-sym "-" "_") #"\.")
        path-vec (concat ["src"]
                         (butlast parts)
                         [(str (last parts) ".clj")])]
    (apply fs/path path-vec)))

(def all-scripts
  (concat
   [prelude-str
    meta-str]
   (->> (sorted-namespaces "src")
        (filter #(str/starts-with? % "babashka.bbin"))
        (map #(slurp (str (ns-sym->path %)))))))

(defn gen-script []
  (spit "bbin" (str/join "\n" all-scripts)))
